#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord hit_record;
void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

vec3 RandomDirection() {
  float theta = acos(1.0 - 2.0 * RandomFloat());
  float phi = RandomFloat() * 2 * PI;
  vec3 direction = vec3(cos(theta), sin(theta) * cos(phi), sin(theta) * sin(phi));
  return direction;
}

vec3 RandomDirectionLambertian(vec3 normal) {
  vec3 component1 = vec3(0.0);
  if (length(normal.xy) >= 0.7)
    component1 = normalize(vec3(normal.y, -normal.x, 0.0));
  else
    component1 = normalize(vec3(0.0, -normal.z, normal.y));
  vec3 component2 = cross(normal, component1);
  float theta = acos(1.0 - 2.0 * RandomFloat()) * 0.5;
  float phi = RandomFloat() * 2 * PI;
  vec3 direction = cos(theta) * normal + sin(theta) * (cos(phi) * component1 + sin(phi) * component2);
  return direction;
}

float MIS_weight(vec3 origin, vec3 direction) {
  // return 0.0;
  ObjectInfo object_info = object_infos[ray_payload.object_id];
  int num_faces = int(object_infos[ray_payload.object_id + 1].index_offset - object_infos[ray_payload.object_id].index_offset) / 3;
  Vertex v0 = GetVertex(
      object_info.vertex_offset +
      indices[object_info.index_offset + ray_payload.primitive_id * 3 + 0]);
  Vertex v1 = GetVertex(
      object_info.vertex_offset +
      indices[object_info.index_offset + ray_payload.primitive_id * 3 + 1]);
  Vertex v2 = GetVertex(
      object_info.vertex_offset +
      indices[object_info.index_offset + ray_payload.primitive_id * 3 + 2]);
  vec3 p0 = v0.position;
  vec3 p1 = v1.position;
  vec3 p2 = v2.position;
  float a = length(cross(p1 - p0, p2 - p0)) * 0.5;
  float distance = length(hit_record.position - origin);
  float pdf = distance * distance / abs(clamp(dot(hit_record.normal, -direction), -1, 1)) / a / num_faces;
  float pdf2 = 0.5 / PI;
  return pdf * pdf / (pdf * pdf + pdf2 * pdf2);
}

vec3 LightSampling(vec3 origin, vec3 normal, vec3 old_direction) {
  ObjectInfo object_info = object_infos[0];
  Material material_emission = materials[0];
  int num_faces = int(object_infos[1].index_offset - object_infos[0].index_offset) / 3;
  int random_index = int(RandomFloat() * num_faces);
  Vertex v0 = GetVertex(object_info.vertex_offset + indices[object_info.index_offset + random_index * 3 + 0]);
  Vertex v1 = GetVertex(object_info.vertex_offset + indices[object_info.index_offset + random_index * 3 + 1]);
  Vertex v2 = GetVertex(object_info.vertex_offset + indices[object_info.index_offset + random_index * 3 + 2]);
  vec3 p0 = v0.position;
  vec3 p1 = v1.position;
  vec3 p2 = v2.position;
  float x_length = RandomFloat();
  float y_length = RandomFloat();
  if (x_length + y_length > 1) {
    x_length = 1 - x_length;
    y_length = 1 - y_length;
  }
  float a = length(cross(p1 - p0, p2 - p0)) * 0.5;
  
  vec3 random_position = p0 * (1 - x_length - y_length) + p1 * x_length + p2 * y_length;
  float distance = length(random_position - origin);
  vec3 direction = normalize(random_position - origin);
  if (dot(normal, direction) < 0) return vec3(0.0);
  TraceRay(origin, direction);
  if (ray_payload.object_id == 0 && ray_payload.primitive_id == random_index) {
    vec3 light = hit_record.emission * hit_record.emission_strength
                * abs(dot(normal, direction))
                * clamp(dot(hit_record.normal, -direction), -1, 1)
                * a / (distance * distance) * num_faces
                * (1 / (PI * 2))
                * MIS_weight(origin, direction);
    return light;
  } else return vec3(0.0);
}

vec2 AntiAliasingSample(int sample_time) {
  // MSAA
  int l = 8;
  int t = sample_time % (l * l);
  float dx = (2.0 / l) * (t / l) - (1.0 - 1.0 / l);
  float dy = (2.0 / l) * (t % l) - (1.0 - 1.0 / l);
  return vec2(dx, dy);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  float RR_probability = 0.9;
  uint previous_material = MATERIAL_TYPE_EMISSION;
  for (int b = 0; b <= guo.num_bounces; b++) {
    if (b >= guo.num_bounces || RandomFloat() > RR_probability) {
      throughput = vec3(0.0);
      break;
    } else {
      throughput /= RR_probability;
    }
    TraceRay(origin, direction);

    if (ray_payload.t == -1.0) {
      throughput *= SampleEnvmap(direction);
      radiance += throughput;
      break;
    } else {
      Material material = materials[hit_record.hit_entity_id];
      if (material.material_type == MATERIAL_TYPE_EMISSION) {
        throughput *= material.emission * material.emission_strength;
        // if (previous_material != MATERIAL_TYPE_LAMBERTIAN) radiance += throughput;
        // else radiance += throughput * (1 - MIS_weight(origin, direction));
        radiance += throughput;
        break;
      } else {
        throughput *= material.albedo_color *
                      vec3(texture(texture_samplers[material.albedo_texture_id],
                                   hit_record.tex_coord));
        previous_material = material.material_type;
        origin = hit_record.position;
        vec3 old_direction = direction;
        vec3 normal = hit_record.normal;
        if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
          float inv_refraction_rate = DEFAULT_REFRACTION_RATE;
          float theta1 = dot(normal, old_direction);
          if (theta1 < 0) inv_refraction_rate = 1 / inv_refraction_rate;
          vec3 direction1 = old_direction - 2 * dot(normal, old_direction) * normal;
          vec3 direction2 = old_direction;
          float theta2 = sqrt(1 - theta1 * theta1) * inv_refraction_rate;
          if (theta2 > 1) direction = direction1;
          else {
            float cos_theta2 = sqrt(1 - theta2 - theta2);
            vec3 component1 = normal;
            if (theta1 < 0) component1 = -normal;
            vec3 component2 = cross(normalize(cross(normal, old_direction)), normal);
            direction2 = normalize(cos_theta2 * component1 + theta2 * component2);
            float r0 = (1 - inv_refraction_rate) / (1 + inv_refraction_rate);
            r0 = r0 * r0;
            float reflectance = r0 + (1 - r0) * pow(1 - abs(dot(old_direction, normal)), 5);
            if (RandomFloat() < reflectance){
              direction = direction1;
            } else {
              direction = direction2;
            }
          }
        } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
          direction = old_direction - 2 * dot(normal, old_direction) * normal;
        } else if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
          // radiance += LightSampling(origin, normal, old_direction) * throughput;
          if (dot(normal, old_direction) < 0) direction = RandomDirectionLambertian(normal);
          else direction = RandomDirectionLambertian(-normal);
        } else {
          direction = old_direction;
        }
        // radiance += throughput * guo.envmap_minor_color;
        // throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
        // TraceRay(origin, direction);
        // if (ray_payload.t < 0.0f) {
        //   radiance += throughput * guo.envmap_major_color;
        // }
        // break;
      }
    }
  }
  return radiance;
}

// TODO
// principled bsdf
// functional texture mapping
// motion blur

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec2 d0 = d + AntiAliasingSample(i) / vec2(gl_LaunchSizeEXT.xy);
    vec4 origin_camera = vec4(RandomInCircle() * guo.aperture, 0, 1);
    vec4 origin = camera_to_world * origin_camera;
    vec4 target = screen_to_camera * vec4(vec3(d0.x, d0.y, 1), 1) * guo.focal_length;
    vec4 direction = camera_to_world * vec4(normalize(target.xyz - origin_camera.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
